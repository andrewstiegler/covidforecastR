geom_pointrange(aes(x = (current_inf / population) * 100000 * (1 + forecast_increase / 100),
xmin = inf_lower_50 / population * 100000,
xmax = inf_upper_50 / population * 100000,
y = region, text = forecast_inf_label(current_inf / population * 100000 * forecast_increase),
color = current_inf / population * 100000 * forecast_increase,
), size = 1.1, show.legend = FALSE, alpha = 0.2)+
# annotate("segment", x = 1, xend = 1, y = 0, yend = 60, linetype = "dashed")+
scale_fill_viridis("Cases per 100k", "inferno")+
theme_bw(base_size = 12)+
ylab("")+
xlab("")
ggplot(all_states_for_bar)+
geom_col(aes(x = current_inf / population * 100000, y = region,
fill = current_inf / population * 100000,
text = current_inf_label(current_inf / population * 100000)), show.legend = FALSE)+
geom_pointrange(aes(x = (current_inf / population) * 100000 * (1 + forecast_increase / 100),
xmin = inf_lower_50 / population * 100000,
xmax = inf_upper_50 / population * 100000,
y = region, text = forecast_inf_label(current_inf / population * 100000 * forecast_increase),
color = current_inf / population * 100000 * forecast_increase,
), size = 1.1, show.legend = FALSE, alpha = 0.2)+
# annotate("segment", x = 1, xend = 1, y = 0, yend = 60, linetype = "dashed")+
scale_fill_viridis("Cases per 100k", "inferno")+
scale_color_viridis("Cases per 100k", "inferno")+
theme_bw(base_size = 12)+
ylab("")+
scale_x_continuous("", position = "top")
(all_states_for_bar$current_inf / all_states_for_bar$population) *
(1 + all_states_for_bar$forecast_increase / 100)
(all_states_for_bar$current_inf / all_states_for_bar$population * 100000) *
(1 + all_states_for_bar$forecast_increase / 100)
all_states_for_bar$forecast_per_100k <- (all_states_for_bar$current_inf / all_states_for_bar$population * 100000) *
(1 + all_states_for_bar$forecast_increase / 100)
all_states_for_bar$region <- factor(all_states_for_bar$region) %>% fct_reorder(all_states_for_bar$forecast_per_100k)
ggplot(all_states_for_bar)+
geom_pointrange(aes(x = (current_inf / population) * 100000 * (1 + forecast_increase / 100),
xmin = inf_lower_50 / population * 100000,
xmax = inf_upper_50 / population * 100000,
y = region, text = forecast_inf_label(current_inf / population * 100000 * forecast_increase),
color = current_inf / population * 100000 * forecast_increase,
), size = 1.1, show.legend = FALSE, alpha = 0.2)+
# annotate("segment", x = 1, xend = 1, y = 0, yend = 60, linetype = "dashed")+
scale_color_viridis("Cases per 100k", "inferno")+
theme_bw(base_size = 12)+
ylab("")+
scale_x_continuous("", position = "top")
ggplot(all_states_for_bar)+
geom_pointrange(aes(x = (current_inf / population) * 100000 * (1 + forecast_increase / 100),
xmin = inf_lower_50 / population * 100000,
xmax = inf_upper_50 / population * 100000,
y = region, text = forecast_inf_label(current_inf / population * 100000 * forecast_increase),
color = current_inf / population * 100000 * forecast_increase,
), size = 1.1, show.legend = FALSE)+
# annotate("segment", x = 1, xend = 1, y = 0, yend = 60, linetype = "dashed")+
scale_color_viridis("Cases per 100k", "inferno")+
theme_bw(base_size = 12)+
ylab("")+
scale_x_continuous("", position = "top")
all_states_for_bar <- all_states_delta
all_states_for_bar$region <- all_states_for_bar$name
all_states_for_bar <- inner_join(all_states_for_bar, state_pop, by = "region")
all_states_for_bar$region <- all_states_for_bar$region %>% toupper()
all_states_for_bar$region <- factor(all_states_for_bar$region) %>% fct_reorder(all_states_for_bar$current_rt)
r_bar_label <- function(data){
data <- round(data, 2)
label <- paste("Current R: ", data, sep = "")
return(label)
}
current_inf_label <- function(data){
data <- floor(data)
label <- paste("Current infections per 100k: ", data, sep = "")
return(label)
}
forecast_inf_label <- function(data){
data <- floor(data)
label <- paste("Forecast infections per 100k: ", data, sep = "")
return(label)
}
current_r_bar <- ggplot(all_states_for_bar)+
geom_pointrange(aes(x = current_rt, xmin = rt_lower_50, xmax = rt_upper_50,
y = region, color = current_rt, text = r_bar_label(current_rt)),
size = 1.1, show.legend = FALSE)+
annotate("segment", x = 1, xend = 1, y = 0, yend = 50, linetype = "dashed")+
scale_color_gradient2("Rt", low = "#4daf4a", high = "#e41a1c", mid = "#377eb8",
midpoint = 1)+
theme_bw(base_size = 12)+
ylab("")+
scale_x_continuous("", position = "top")
all_states_for_bar$region <- factor(all_states_for_bar$region) %>% fct_reorder(all_states_for_bar$current_inf / all_states_for_bar$population)
current_inf_bar <- ggplot(all_states_for_bar)+
geom_col(aes(x = current_inf / population * 100000, y = region,
fill = current_inf / population * 100000,
text = current_inf_label(current_inf / population * 100000)), show.legend = FALSE)+
geom_pointrange(aes(x = (current_inf / population) * 100000 * (1 + forecast_increase / 100),
xmin = inf_lower_50 / population * 100000,
xmax = inf_upper_50 / population * 100000,
y = region, text = forecast_inf_label(current_inf / population * 100000 * forecast_increase),
color = current_inf / population * 100000 * forecast_increase,
), size = 1.1, show.legend = FALSE, alpha = 0.2)+
# annotate("segment", x = 1, xend = 1, y = 0, yend = 60, linetype = "dashed")+
scale_fill_viridis("Cases per 100k", "inferno")+
scale_color_viridis("Cases per 100k", "inferno")+
theme_bw(base_size = 12)+
ylab("")+
scale_x_continuous("", position = "top")
all_states_for_bar$forecast_per_100k <- (all_states_for_bar$current_inf / all_states_for_bar$population * 100000) *
(1 + all_states_for_bar$forecast_increase / 100)
all_states_for_bar$region <- factor(all_states_for_bar$region) %>% fct_reorder(all_states_for_bar$forecast_per_100k)
forecast_inf_bar <- ggplot(all_states_for_bar)+
geom_pointrange(aes(x = (current_inf / population) * 100000 * (1 + forecast_increase / 100),
xmin = inf_lower_50 / population * 100000,
xmax = inf_upper_50 / population * 100000,
y = region, text = forecast_inf_label(current_inf / population * 100000 * forecast_increase),
color = current_inf / population * 100000 * forecast_increase,
), size = 1.1, show.legend = FALSE)+
# annotate("segment", x = 1, xend = 1, y = 0, yend = 60, linetype = "dashed")+
scale_color_viridis("Cases per 100k", "inferno")+
theme_bw(base_size = 12)+
ylab("")+
scale_x_continuous("", position = "top")
forecast_bar <- ggplot(all_states_for_bar)+
geom_col(aes(x = forecast_increase, y = region, fill = forecast_increase,
text = forecast_inf_label(forecast_increase)), show.legend = FALSE)+
annotate("segment", x = 0, xend = 0, y = 0, yend = 50, linetype = "dashed")+
scale_fill_gradient2("Rt", low = "#4daf4a", high = "#e41a1c", mid = "#377eb8",
midpoint = 0)+
theme_bw(base_size = 12)+
ylab("")+
xlab("")
bar_list <- list(current_r_bar, current_inf_bar, forecast_inf_bar)
saveRDS(good_map_list, "data/goodmaps.rds")
saveRDS(bar_list, "data/bar_list.rds")
saveRDS(us_estimates,"data/us_estimates.rds")
saveRDS(state_estimates_data,"data/state_data.rds")
saveRDS(state_estimates_plot,"data/state_plots.rds")
saveRDS(list(us_infection_plot, us_rt_plot),"data/us_plots.rds")
getwd()
library(flexdashboard)
library(tidyverse)
library(data.table)
library(plotly)
library(withr)
library(leaflet)
library(geojsonio)
library(RColorBrewer)
# Load data
us_plots <- readRDS("data/us_plots.rds")
library(flexdashboard)
library(tidyverse)
library(data.table)
library(plotly)
library(withr)
library(leaflet)
library(geojsonio)
library(RColorBrewer)
# Load data
us_plots <- readRDS("/data/us_plots.rds")
library(flexdashboard)
library(tidyverse)
library(data.table)
library(plotly)
library(withr)
library(leaflet)
library(geojsonio)
library(RColorBrewer)
# Load data
setwd("data")
saveRDS(good_map_list, "goodmaps.rds")
saveRDS(bar_list, "bar_list.rds")
saveRDS(us_estimates,"us_estimates.rds")
saveRDS(state_estimates_data,"state_data.rds")
saveRDS(state_estimates_plot,"state_plots.rds")
saveRDS(list(us_infection_plot, us_rt_plot),"us_plots.rds")
library(flexdashboard)
library(tidyverse)
library(data.table)
library(plotly)
library(withr)
library(leaflet)
library(geojsonio)
library(RColorBrewer)
# Load data
us_plots <- readRDS("us_plots.rds")
readRDS(us_plots.rds)
readRDS("us_plots.rds")
saveRDS(good_map_list, "docs/goodmaps.rds")
saveRDS(bar_list, "docs/bar_list.rds")
saveRDS(us_estimates, "docs/us_estimates.rds")
saveRDS(state_estimates_data, "docs/state_data.rds")
saveRDS(state_estimates_plot,"docs/state_plots.rds")
saveRDS(list(us_infection_plot, us_rt_plot), "docs/us_plots.rds")
barplots[[2]] %>% ggplotly(tooltip = c("region", "text"), height = 700)
current_r_bar
current_r_bar %>% ggplotly()
current_r_bar
current_r_bar+coord_flip()
current_r_bar+coord_flip() %>% ggplotly()
current_r_bar+coord_flip() -> test_plot
ggplotly(test_plot)
ggplot(all_states_for_bar)+
geom_errorbar(aes(x = current_rt, xmin = rt_lower_50, xmax = rt_upper_50,
y = region, color = current_rt, text = r_bar_label(current_rt)),
size = 1.1, show.legend = FALSE)+
annotate("segment", x = 1, xend = 1, y = 0, yend = 50, linetype = "dashed")+
scale_color_gradient2("Rt", low = "#4daf4a", high = "#e41a1c", mid = "#377eb8",
midpoint = 1)+
theme_bw(base_size = 12)+
ylab("")+
scale_x_continuous("", position = "top")
ggplot(all_states_for_bar)+
geom_errorbar(aes(x = current_rt, xmin = rt_lower_50, xmax = rt_upper_50,
y = region, color = current_rt, text = r_bar_label(current_rt)),
size = 1.1, show.legend = FALSE)+
geom_point(aes(x = current_rt,
y = region, color = current_rt, text = r_bar_label(current_rt)),
size = 1.1, show.legend = FALSE)+
annotate("segment", x = 1, xend = 1, y = 0, yend = 50, linetype = "dashed")+
scale_color_gradient2("Rt", low = "#4daf4a", high = "#e41a1c", mid = "#377eb8",
midpoint = 1)+
theme_bw(base_size = 12)+
ylab("")+
scale_x_continuous("", position = "top")
ggplot(all_states_for_bar)+
geom_errorbar(aes(x = current_rt, xmin = rt_lower_50, xmax = rt_upper_50,
y = region, color = current_rt, text = r_bar_label(current_rt)),
size = 1, show.legend = FALSE)+
geom_point(aes(x = current_rt,
y = region, color = current_rt, text = r_bar_label(current_rt)),
size = 1.2, show.legend = FALSE)
all_states_for_bar$region <- factor(all_states_for_bar$region) %>% fct_reorder(all_states_for_bar$current_rt)
r_bar_label <- function(data){
data <- round(data, 2)
label <- paste("Current R: ", data, sep = "")
return(label)
}
current_inf_label <- function(data){
data <- floor(data)
label <- paste("Current infections per 100k: ", data, sep = "")
return(label)
}
forecast_inf_label <- function(data){
data <- floor(data)
label <- paste("Forecast infections per 100k: ", data, sep = "")
return(label)
}
current_r_bar <- ggplot(all_states_for_bar)+
geom_errorbar(aes(x = current_rt, xmin = rt_lower_50, xmax = rt_upper_50,
y = region, color = current_rt, text = r_bar_label(current_rt)),
size = 1, show.legend = FALSE)+
geom_point(aes(x = current_rt,
y = region, color = current_rt, text = r_bar_label(current_rt)),
size = 2.5, show.legend = FALSE)+
annotate("segment", x = 1, xend = 1, y = 0, yend = 50, linetype = "dashed")+
scale_color_gradient2("Rt", low = "#4daf4a", high = "#e41a1c", mid = "#377eb8",
midpoint = 1)+
theme_bw(base_size = 12)+
ylab("")+
scale_x_continuous("", position = "top")
ggplotly(current_r_bar)
current_r_bar
ggplotly(current_r_bar)
ggplot(all_states_for_bar)+
geom_crossbar(aes(x = current_rt, xmin = rt_lower_50, xmax = rt_upper_50,
y = region, color = current_rt, text = r_bar_label(current_rt)),
size = 1, show.legend = FALSE)+
#    geom_point(aes(x = current_rt,
#                  y = region, color = current_rt, text = r_bar_label(current_rt)),
#  size = 2.5, show.legend = FALSE)+
annotate("segment", x = 1, xend = 1, y = 0, yend = 50, linetype = "dashed")+
scale_color_gradient2("Rt", low = "#4daf4a", high = "#e41a1c", mid = "#377eb8",
midpoint = 1)+
theme_bw(base_size = 12)+
ylab("")+
scale_x_continuous("", position = "top")
ggplot(all_states_for_bar)+
geom_crossbar(aes(x = current_rt, xmin = rt_lower_50, xmax = rt_upper_50,
y = region, color = current_rt, text = r_bar_label(current_rt)),
size = 0.8, show.legend = FALSE)+
#    geom_point(aes(x = current_rt,
#                  y = region, color = current_rt, text = r_bar_label(current_rt)),
#  size = 2.5, show.legend = FALSE)+
annotate("segment", x = 1, xend = 1, y = 0, yend = 50, linetype = "dashed")+
scale_color_gradient2("Rt", low = "#4daf4a", high = "#e41a1c", mid = "#377eb8",
midpoint = 1)+
theme_bw(base_size = 12)+
ylab("")+
scale_x_continuous("", position = "top")
ggplot(all_states_for_bar)+
geom_crossbar(aes(x = current_rt, xmin = rt_lower_50, xmax = rt_upper_50,
y = region, color = current_rt, text = r_bar_label(current_rt)),
size = 0.3, show.legend = FALSE, fatten = 4)+
#    geom_point(aes(x = current_rt,
#                  y = region, color = current_rt, text = r_bar_label(current_rt)),
#  size = 2.5, show.legend = FALSE)+
annotate("segment", x = 1, xend = 1, y = 0, yend = 50, linetype = "dashed")+
scale_color_gradient2("Rt", low = "#4daf4a", high = "#e41a1c", mid = "#377eb8",
midpoint = 1)+
theme_bw(base_size = 12)+
ylab("")+
scale_x_continuous("", position = "top")
current_r_bar <- ggplot(all_states_for_bar)+
geom_crossbar(aes(x = current_rt, xmin = rt_lower_50, xmax = rt_upper_50,
y = region, color = current_rt, text = r_bar_label(current_rt)),
size = 0.3, show.legend = FALSE, fatten = 4)+
#    geom_point(aes(x = current_rt,
#                  y = region, color = current_rt, text = r_bar_label(current_rt)),
#  size = 2.5, show.legend = FALSE)+
annotate("segment", x = 1, xend = 1, y = 0, yend = 50, linetype = "dashed")+
scale_color_gradient2("Rt", low = "#4daf4a", high = "#e41a1c", mid = "#377eb8",
midpoint = 1)+
theme_bw(base_size = 12)+
ylab("")+
scale_x_continuous("", position = "top")
ggplotly(current_r_bar)
all_states_for_bar$region <- factor(all_states_for_bar$region) %>% fct_reorder(all_states_for_bar$current_rt)
r_bar_label <- function(data){
data <- round(data, 2)
label <- paste("Current R: ", data, sep = "")
return(label)
}
current_inf_label <- function(data){
data <- floor(data)
label <- paste("Current infections per 100k: ", data, sep = "")
return(label)
}
forecast_inf_label <- function(data){
data <- floor(data)
label <- paste("Forecast infections per 100k: ", data, sep = "")
return(label)
}
current_r_bar <- ggplot(all_states_for_bar)+
geom_crossbar(aes(x = current_rt, xmin = rt_lower_50, xmax = rt_upper_50,
y = region, color = current_rt, text = r_bar_label(current_rt)),
size = 0.1, show.legend = FALSE, fatten = 5)+
#    geom_point(aes(x = current_rt,
#                  y = region, color = current_rt, text = r_bar_label(current_rt)),
#  size = 2.5, show.legend = FALSE)+
annotate("segment", x = 1, xend = 1, y = 0, yend = 50, linetype = "dashed")+
scale_color_gradient2("Rt", low = "#4daf4a", high = "#e41a1c", mid = "#377eb8",
midpoint = 1)+
theme_bw(base_size = 12)+
ylab("")+
scale_x_continuous("", position = "top")
ggplotly(current_r_bar)
ggplotly(current_r_bar, xaxis = list(side = "top")
)
ggplotly(current_r_bar) %>% layout(xaxis = list(side = "top"))
all_states_for_bar$forecast_per_100k <- (all_states_for_bar$current_inf / all_states_for_bar$population * 100000) *
(1 + all_states_for_bar$forecast_increase / 100)
all_states_for_bar$region <- factor(all_states_for_bar$region) %>% fct_reorder(all_states_for_bar$forecast_per_100k)
forecast_inf_bar <- ggplot(all_states_for_bar)+
geom_crossbar(aes(x = (current_inf / population) * 100000 * (1 + forecast_increase / 100),
xmin = inf_lower_50 / population * 100000,
xmax = inf_upper_50 / population * 100000,
y = region, text = forecast_inf_label(current_inf / population * 100000 * forecast_increase),
color = current_inf / population * 100000 * forecast_increase,
), size = 0.1, fatten = 5, show.legend = FALSE)+
# annotate("segment", x = 1, xend = 1, y = 0, yend = 60, linetype = "dashed")+
scale_color_viridis("Cases per 100k", "inferno")+
theme_bw(base_size = 12)+
ylab("")+
scale_x_continuous("", position = "top")
forecast_inf_bar
current_inf_bar
all_states_for_bar$region <- factor(all_states_for_bar$region) %>% fct_reorder(all_states_for_bar$current_inf / all_states_for_bar$population)
current_inf_bar <- ggplot(all_states_for_bar)+
geom_col(aes(x = current_inf / population * 100000, y = region,
fill = current_inf / population * 100000,
text = current_inf_label(current_inf / population * 100000)), show.legend = FALSE)+
# annotate("segment", x = 1, xend = 1, y = 0, yend = 60, linetype = "dashed")+
scale_fill_viridis("Cases per 100k", "inferno")+
scale_color_viridis("Cases per 100k", "inferno")+
theme_bw(base_size = 12)+
ylab("")+
scale_x_continuous("", position = "top")
current_inf_bar
bar_list <- list(current_r_bar, current_inf_bar, forecast_inf_bar)
bar_list
ggplot(all_states_for_bar)+
geom_col(aes(x = forecast_increase, y = region, fill = forecast_increase,
text = forecast_inf_label(forecast_increase)), show.legend = FALSE)+
annotate("segment", x = 0, xend = 0, y = 0, yend = 50, linetype = "dashed")+
scale_fill_gradient2("Rt", low = "#4daf4a", high = "#e41a1c", mid = "#377eb8",
midpoint = 0)+
theme_bw(base_size = 12)+
ylab("")+
xlab("")
ggplot(all_states_for_bar)+
geom_crossbar(aes(x = (current_inf / population) * 100000 * (1 + forecast_increase / 100),
xmin = inf_lower_50 / population * 100000,
xmax = inf_upper_50 / population * 100000,
y = region, text = forecast_inf_label(current_inf / population * 100000 * forecast_increase),
color = current_inf / population * 100000 * forecast_increase,
), size = 0.3, fatten = 10, show.legend = FALSE)+
# annotate("segment", x = 1, xend = 1, y = 0, yend = 60, linetype = "dashed")+
scale_color_viridis("Cases per 100k", "inferno")+
theme_bw(base_size = 12)+
ylab("")+
scale_x_continuous("", position = "top")
ggplot(all_states_for_bar)+
geom_crossbar(aes(x = (current_inf / population) * 100000 * (1 + forecast_increase / 100),
xmin = inf_lower_50 / population * 100000,
xmax = inf_upper_50 / population * 100000,
y = region, text = forecast_inf_label(current_inf / population * 100000 * forecast_increase),
color = current_inf / population * 100000 * forecast_increase,
), size = 0.2, fatten = 10, show.legend = FALSE)+
# annotate("segment", x = 1, xend = 1, y = 0, yend = 60, linetype = "dashed")+
scale_color_viridis("Cases per 100k", "inferno")+
theme_bw(base_size = 12)+
ylab("")+
scale_x_continuous("", position = "top")
all_states_for_bar$region <- factor(all_states_for_bar$region) %>% fct_reorder(all_states_for_bar$current_rt)
r_bar_label <- function(data){
data <- round(data, 2)
label <- paste("Current R: ", data, sep = "")
return(label)
}
current_inf_label <- function(data){
data <- floor(data)
label <- paste("Current infections per 100k: ", data, sep = "")
return(label)
}
forecast_inf_label <- function(data){
data <- floor(data)
label <- paste("Forecast infections per 100k: ", data, sep = "")
return(label)
}
current_r_bar <- ggplot(all_states_for_bar)+
geom_crossbar(aes(x = current_rt, xmin = rt_lower_50, xmax = rt_upper_50,
y = region, color = current_rt, text = r_bar_label(current_rt)),
size = 0.1, show.legend = FALSE, fatten = 10)+
#    geom_point(aes(x = current_rt,
#                  y = region, color = current_rt, text = r_bar_label(current_rt)),
#  size = 2.5, show.legend = FALSE)+
annotate("segment", x = 1, xend = 1, y = 0, yend = 50, linetype = "dashed")+
scale_color_gradient2("Rt", low = "#4daf4a", high = "#e41a1c", mid = "#377eb8",
midpoint = 1)+
theme_bw(base_size = 12)+
ylab("")+
scale_x_continuous("", position = "top")
all_states_for_bar$region <- factor(all_states_for_bar$region) %>% fct_reorder(all_states_for_bar$current_inf / all_states_for_bar$population)
current_inf_bar <- ggplot(all_states_for_bar)+
geom_col(aes(x = current_inf / population * 100000, y = region,
fill = current_inf / population * 100000,
text = current_inf_label(current_inf / population * 100000)), show.legend = FALSE)+
# annotate("segment", x = 1, xend = 1, y = 0, yend = 60, linetype = "dashed")+
scale_fill_viridis("Cases per 100k", "inferno")+
scale_color_viridis("Cases per 100k", "inferno")+
theme_bw(base_size = 12)+
ylab("")+
scale_x_continuous("", position = "top")
all_states_for_bar$forecast_per_100k <- (all_states_for_bar$current_inf / all_states_for_bar$population * 100000) *
(1 + all_states_for_bar$forecast_increase / 100)
all_states_for_bar$region <- factor(all_states_for_bar$region) %>% fct_reorder(all_states_for_bar$forecast_per_100k)
forecast_inf_bar <- ggplot(all_states_for_bar)+
geom_crossbar(aes(x = (current_inf / population) * 100000 * (1 + forecast_increase / 100),
xmin = inf_lower_50 / population * 100000,
xmax = inf_upper_50 / population * 100000,
y = region, text = forecast_inf_label(current_inf / population * 100000 * forecast_increase),
color = current_inf / population * 100000 * forecast_increase,
), size = 0.1, fatten = 10, show.legend = FALSE)+
# annotate("segment", x = 1, xend = 1, y = 0, yend = 60, linetype = "dashed")+
scale_color_viridis("Cases per 100k", "inferno")+
theme_bw(base_size = 12)+
ylab("")+
scale_x_continuous("", position = "top")
forecast_bar <- ggplot(all_states_for_bar)+
geom_col(aes(x = forecast_increase, y = region, fill = forecast_increase,
text = forecast_inf_label(forecast_increase)), show.legend = FALSE)+
annotate("segment", x = 0, xend = 0, y = 0, yend = 50, linetype = "dashed")+
scale_fill_gradient2("Rt", low = "#4daf4a", high = "#e41a1c", mid = "#377eb8",
midpoint = 0)+
theme_bw(base_size = 12)+
ylab("")+
xlab("")
bar_list <- list(current_r_bar, current_inf_bar, forecast_inf_bar)
saveRDS(good_map_list, "docs/goodmaps.rds")
saveRDS(bar_list, "docs/bar_list.rds")
saveRDS(us_estimates, "docs/us_estimates.rds")
saveRDS(state_estimates_data, "docs/state_data.rds")
saveRDS(state_estimates_plot,"docs/state_plots.rds")
saveRDS(list(us_infection_plot, us_rt_plot), "docs/us_plots.rds")
forecast_inf_label(5)
forecast_inf_bar <- ggplot(all_states_for_bar)+
geom_crossbar(aes(x = (current_inf / population) * 100000 * (1 + forecast_increase / 100),
xmin = inf_lower_50 / population * 100000,
xmax = inf_upper_50 / population * 100000,
y = region, text = forecast_inf_label(current_inf / population * 100000 * forecast_increase),
color = current_inf / population * 100000 * forecast_increase,
), size = 0.1, fatten = 10, show.legend = FALSE)+
# annotate("segment", x = 1, xend = 1, y = 0, yend = 60, linetype = "dashed")+
scale_color_viridis("Cases per 100k", "inferno")+
theme_bw(base_size = 12)+
ylab("")+
scale_x_continuous("", position = "top")
forecast_inf_bar %>% ggplotly(tooltip = c("region", "text"), height = 700) %>% layout(xaxis = list(side = "top"))
forecast_inf_bar <- ggplot(all_states_for_bar)+
geom_crossbar(aes(x = (current_inf / population) * 100000 * (1 + forecast_increase / 100),
xmin = inf_lower_50 / population * 100000,
xmax = inf_upper_50 / population * 100000,
y = region, text = forecast_inf_label((current_inf / population) * 100000 * (1 + forecast_increase / 100)),
color = current_inf / population * 100000 * forecast_increase,
), size = 0.1, fatten = 10, show.legend = FALSE)+
# annotate("segment", x = 1, xend = 1, y = 0, yend = 60, linetype = "dashed")+
scale_color_viridis("Cases per 100k", "inferno")+
theme_bw(base_size = 12)+
ylab("")+
scale_x_continuous("", position = "top")
bar_list <- list(current_r_bar, current_inf_bar, forecast_inf_bar)
saveRDS(good_map_list, "docs/goodmaps.rds")
saveRDS(bar_list, "docs/bar_list.rds")
bar_list[[3]] %>% ggplotly(tooltip = c("region", "text"), height = 700) %>% layout(xaxis = list(side = "top"))
